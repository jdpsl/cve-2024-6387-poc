#!/bin/bash

echo "   _______      ________    ___   ___ ___  _  _            __ ____   ___ ______ "
echo "  / ____\ \    / /  ____|  |__ \ / _ \__ \| || |          / /|___ \ / _ \____  |"
echo " | |     \ \  / /| |__ ______ ) | | | | ) | || |_ ______ / /_  __) | (_) |  / / "
echo " | |      \ \/ / |  __|______/ /| | | |/ /|__   _|______| '_ \|__ < > _ <  / /  "
echo " | |____   \  /  | |____    / /_| |_| / /_   | |        | (_) |__) | (_) |/ /   "
echo "  \_____|   \/   |______|  |____|\___/____|  |_|         \___/____/ \___//_/    "
echo "   glib address extractor                                                                                "
echo "                                                                                   "

echo "[i] Writting inspect_memory.c"
# Step 1: Compile the simple C program
cat <<EOF > inspect_memory.c
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>
#include <glib.h>


int main() {
    printf("Process ID: %d\n", getpid());
    printf("Press Enter to continue...\n");
    getchar();  // Pause to allow you to inspect the memory layout
    return 0;
}
EOF

if [ -f "inspect_memory.c" ]; then
    echo "[+] File inspect_memory.c exists."
else
    echo "[-] File inspect_memory.c does not exist."
    exit 1
fi


echo "[i] Compiling..."
gcc `pkg-config --cflags --libs glib-2.0` inspect_memory.c -o inspect_memory

if [ -f "inspect_memory" ]; then
    echo "[+] File inspect_memory exists."
else
    echo "[-] File inspect_memory does not exist."
    exit 2
fi

echo "[i] Executing inspect memory and forking to the background"
# Step 2: Run the compiled program in the background
./inspect_memory &

# Get the PID of the running process
pid=$!

echo "[i] Lets wait a few seconds to make sure it start"
# Give some time for the program to start and print the PID
sleep 5

# Check if pid is empty or not
if [ -z "$pid" ]; then
    echo "[-] Failed to get PID. Process might not have started."
    exit 3
else
    echo "[+] PID of the process: $pid"
fi



# Step 3: Extract the base addresses for libc from the /proc/<pid>/maps file
glibc_bases=$(grep libc /proc/$pid/maps | awk '{print $1}')

# Print the base addresses
echo "GLIBC Base Addresses:"
for base in $glibc_bases; do
    echo "0x$base"
done

# Step 4: Extract the addresses for _codecvt from the /proc/<pid>/maps file
codecvt_addrs=$(grep libc /proc/$pid/maps | awk '{print $1}')
echo "Codecvt Addresses:"
for addr in $codecvt_addrs; do
    echo "0x$addr"
done

# Step 5: Extract the addresses for _IO_wfile_jumps from the /proc/<pid>/maps file
wfile_jumps_addrs=$(grep libc /proc/$pid/maps | awk '{print $1}')
echo "_IO_wfile_jumps Addresses:"
for addr in $wfile_jumps_addrs; do
    echo "0x$addr"
done

# Step 6: Kill the inspect_memory process
kill $pid

# Clean up
rm inspect_memory inspect_memory.c
