#!/bin/bash

find_executable_entry() {
    local pid="$1"
    local lib_name="$2"

    # Get pmap output for the process
    local pmap_output=$(pmap -x "$pid" 2>/dev/null)

    # Search for the library entry and determine which one is executable
    local executable_entry=""
    while IFS= read -r line; do
        if [[ "$line" == *"$lib_name"* ]]; then
            if [[ "$line" == *r-x* ]]; then
                executable_entry="$line"
                break
            fi
        fi
    done <<< "$pmap_output"

    echo "$executable_entry"
}


echo "   _______      ________    ___   ___ ___  _  _            __ ____   ___ ______ "
echo "  / ____\ \    / /  ____|  |__ \ / _ \__ \| || |          / /|___ \ / _ \____  |"
echo " | |     \ \  / /| |__ ______ ) | | | | ) | || |_ ______ / /_  __) | (_) |  / / "
echo " | |      \ \/ / |  __|______/ /| | | |/ /|__   _|______| '_ \|__ < > _ <  / /  "
echo " | |____   \  /  | |____    / /_| |_| / /_   | |        | (_) |__) | (_) |/ /   "
echo "  \_____|   \/   |______|  |____|\___/____|  |_|         \___/____/ \___//_/    "
echo "   glib address extractor                                                                                "
echo "                                                                                   "

echo "[i] Writting inspect_memory.c"
# Step 1: Compile the simple C program
cat <<EOF > inspect_memory.c
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>
#include <glib.h>


int main() {
    printf("Process ID: %d\n", getpid());
    printf("Press Enter to continue...\n");
    getchar();  // Pause to allow you to inspect the memory layout
    return 0;
}
EOF

if [ -f "inspect_memory.c" ]; then
    echo "[+] File inspect_memory.c exists."
else
    echo "[-] File inspect_memory.c does not exist."
    exit 1
fi


echo "[i] Compiling..."
gcc `pkg-config --cflags --libs glib-2.0` inspect_memory.c -o inspect_memory

if [ -f "inspect_memory" ]; then
    echo "[+] File inspect_memory exists."
else
    echo "[-] File inspect_memory does not exist."
    exit 2
fi

echo "[i] Executing inspect memory and forking to the background"
# Step 2: Run the compiled program in the background
./inspect_memory &

# Get the PID of the running process
pid=$!

echo "[i] Lets wait a few seconds to make sure it start"
# Give some time for the program to start and print the PID
sleep 5


# Check if pid is empty or not
if [ -z "$pid" ]; then
    echo "[-] Failed to get PID. Process might not have started."
    exit 3
else
    echo "[+] PID of the process: $pid"
fi



executable_entry=$(find_executable_entry "$pid" "libc")

# Check if executable entry was found
if [ -z "$executable_entry" ]; then
    echo "[-] Error: Executable entry not found for '$lib_name' in process '$process_name'."
    exit 4
else
    echo "[+] Executable entry for '$executable_entry'"
fi



echo "[i] Finding glib file location"
# Use whereis to find the path of libglib-2.0.so
glib_path=$(whereis -b libglib-2.0.so | awk '{print $2}')

# Check if glib_path is empty (meaning libglib-2.0.so was not found)
if [ -z "$glib_path" ]; then
    echo "[-] Error: libglib-2.0.so not found."
    exit 4
fi

# Print the path found
echo "[+] Path to libglib-2.0.so: $glib_path"

echo "[i] Finding _codecvt"
# Now you can use $glib_path variable in your script as needed
codecvt_info=$(nm -D "$glib_path" | grep _codecvt)

# Check if codecvt_info is not empty (meaning _codecvt was found)
if [ -n "$codecvt_info" ]; then
    # Extract the address using awk or any suitable method
    address=$(echo "$codecvt_info" | awk '{print $1}')

    # Print _codecvt: address
    echo "[+] _codecvt: $address"
else
    echo "[-]Error: _codecvt not found in $glib_path"
    exit 5
fi




echo "[i] Finding _IO_wfile_jumps"
# Now you can use $glib_path variable in your script as needed
jumps_info=$(nm -D "$glib_path" | grep _IO_wfile_jumps)

# Check if codecvt_info is not empty (meaning _IO_wfile_jumps was found)
if [ -n "$jumps_info" ]; then
    # Extract the address using awk or any suitable method
    address=$(echo "$jumps_info" | awk '{print $1}')

    # Print _IO_wfile_jumps: address
    echo "[+] _IO_wfile_jumps: $address"
else
    echo "[-]Error: _IO_wfile_jumps not found in $glib_path"
    exit 5
fi



#kill pid
kill $pid

# Clean up
rm inspect_memory inspect_memory.c
